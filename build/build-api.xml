<project name="zap" default="wave-test" basedir=".">
	<description>Build ZAP.</description>
	<!-- set global properties for this build -->
	<property name="src" location="../src" />
	<property name="dist" location="zap" />

	<!--
	In Eclipse you can get these taskdefs to work by adding the following jars to the 'Ant Home Entries'.
	To get there: Windows / Preferences / Ant / Runtime
	TODO: Work out how this should be done properly and document ;)
	lib/json-lib-2.4-jdk15.jar
	lib/commons-lang-2.6.jar
	lib/commons-logging-1.1.1.jar
	lib/commons-collections-3.2.1.jar
	lib/commons-beanutils-1.8.3.jar
	lib/ezmorph-1.0.6.jar
	build/zap/zap-api.jar (after you've run the dist target in build.xml)
	
	-->
	<taskdef name="accessUrlTask" classname="org.zaproxy.clientapi.ant.AccessUrlTask"/>
	<taskdef name="activeScanUrlTask" classname="org.zaproxy.clientapi.ant.ActiveScanUrlTask"/>
	<taskdef name="alertCheckTask" classname="org.zaproxy.clientapi.ant.AlertCheckTask"/>
	<taskdef name="loadSessionTask" classname="org.zaproxy.clientapi.ant.LoadSessionTask"/>
	<taskdef name="newSessionTask" classname="org.zaproxy.clientapi.ant.NewSessionTask"/>
	<taskdef name="saveSessionTask" classname="org.zaproxy.clientapi.ant.SaveSessionTask"/>
	<taskdef name="spiderUrlTask" classname="org.zaproxy.clientapi.ant.SpiderUrlTask"/>
	<taskdef name="stopZapTask" classname="org.zaproxy.clientapi.ant.StopZapTask"/>
	<taskdef name="alert" classname="org.zaproxy.clientapi.ant.AlertTask"/>

	<!--
	These settings are for ZAP installed in the standard location on a Windows machine
	listenning on localhost:8090 and 
	testing the ZAP Web App Vulnerability Examples running on localhost:8080 
	-->
	<property name="targetHost" value="http://localhost:8080/" />
	<property name="targetApp" value="${targetHost}zap-wave/"/>
	<property name="zapaddr" value="localhost" />
	<property name="zapport" value="8090" />
	<property name="zapdir" value="C:\Program Files\OWASP\Zed Attack Proxy" />

	<target name="startZap">
		<java classname="org.zaproxy.zap.ZAP" fork="true" spawn="true" dir="${zapdir}">
			<classpath>
				<pathelement location="${zapdir}/zap.jar"/>
			</classpath>
		</java>
		<!-- Give ZAP a chance to start -->
		<sleep seconds="20"/>
	</target>

	<target name="startZapDaemon">
		<java classname="org.zaproxy.zap.ZAP" fork="true" spawn="true" dir="${zapdir}">
			<arg value="-daemon"/>
			<classpath>
				<pathelement location="${zapdir}/zap.jar"/>
			</classpath>
		</java>
		<!-- Give ZAP a chance to start -->
		<sleep seconds="20"/>
	</target>

	<target name="stopZap">
	    <stopZapTask zapAddress="${zapaddr}" zapPort="${zapport}" debug="true"/>
	</target>

	<target name="spider">
	    <spiderUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetHost}"/>
	</target>

	<target name="activescan">
	    <activeScanUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetHost}"/>
	</target>
	
	<target name="wave-test">
		
		<!-- Start ZAP -->
		<antcall target="startZapDaemon" />
		
		<!-- Access the top URL -->
	    <accessUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetApp}" debug="true"/>

		<!-- Spider the whole site -->
	    <spiderUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetHost}" debug="true"/>
		<sleep seconds="5"/>
		<!-- Need to Spider again - and need to investigate why this is required ;) -->
	    <spiderUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetHost}" debug="true"/>
		<sleep seconds="5"/>
		
		<!-- Active scan the whole site -->
	    <activeScanUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetHost}" debug="true"/>
		<sleep seconds="5"/>

		<!-- Save to a timestamped session file -->
		<tstamp>
			<format property="timestamp" pattern="MM-dd-yyyy HH-mm-ss"/>
		</tstamp>
	    <saveSessionTask zapAddress="${zapaddr}" zapPort="${zapport}" name="test ${timestamp}" debug="true"/>

		<!-- Give the passive scanner thread a chance to catch up -->
		<sleep seconds="20"/>
		
		<!-- Check the alerts logged -->
	    <alertCheckTask zapAddress="${zapaddr}" zapPort="${zapport}" debug="true">
	    	<!--
	    		The alertCheckTask will fail if any alerts are reported..
	    		ignoreAlert alerts are ignored if reported
	    		requireAlerts will fail if not present
	    		Missing elements match everything, so:
			    	<ignoreAlert risk="Low" reliability="Warning"/>
			    will ignore all alerts with a Low risk and Warning reliability
			    The url, param and other fields are all regexs 
	    	 -->
	    	<ignoreAlert alert="Cookie set without HttpOnly flag" risk="Low" reliability="Warning"/>
	    	<ignoreAlert alert="URL Redirector Abuse" risk="High" reliability="Warning" 
	    		url="${targetApp}active/redirect/redirect-url-basic.jsp?redir=http://www.owasp.org"/> 

	    	<requireAlert alert="Cookie set without HttpOnly flag" risk="Low" reliability="Warning" 
	    		url="${targetApp}passive/info/info-app-stack-trace.jsp"/>
	    	<requireAlert alert="Password Autocomplete in browser" risk="Low" reliability="Warning" 
	    			url="${targetApp}passive/session/session-password-autocomplete.jsp"/>
	    	<requireAlert alert="Cross site scripting" risk="High" reliability="Warning" 
	    		url="${targetApp}active/xss/xss-url-basic.jsp.*"/> 
	    	<requireAlert alert="Cross site scripting" risk="High" reliability="Warning" 
	    		url="${targetApp}active/xss/xss-form-basic.jsp"/> 
	    	<requireAlert alert="Cross site scripting" risk="High" reliability="Warning" 
	    		url="${targetApp}active/xss/xss-form-strip-script.jsp"/> 
	    	<requireAlert alert="SQL Injection Fingerprinting" risk="High" reliability="Suspicious" 
	    		url="${targetApp}active/inject/inject-sql-url-basic.jsp.*"/>
	    	<requireAlert alert="SQL Injection Fingerprinting" risk="High" reliability="Suspicious" 
	    		url="${targetApp}active/inject/inject-sql-form-basic.jsp"/>
	    	<requireAlert alert="SQL Injection" risk="High" reliability="Suspicious" 
	    		url="${targetApp}active/inject/inject-sql-url-basic.jsp.*"/>
	    	<requireAlert alert="SQL Injection" risk="High" reliability="Suspicious" 
		    	url="${targetApp}active/inject/inject-sql-form-basic.jsp"/>
	    	<requireAlert alert="Session ID in URL rewrite" risk="Low" reliability="Warning" 
	    		url="http://localhost:8080/servlets-examples/servlet/SessionExample.*"/>
	    	<requireAlert alert="Cross site scripting" risk="High" reliability="Warning" 
	    		url="http://localhost:8080/zap-wave/active/xss/xss-form-anti-csrf.jsp"/>

	    </alertCheckTask>
		
		<!--
		Note that if the above test fails ZAP will not be stopped, so you will need to call the stopZap target directly.
		-->

		<!-- Stop ZAP -->
	    <stopZapTask zapAddress="${zapaddr}" zapPort="${zapport}"/>
	</target>
	
</project>