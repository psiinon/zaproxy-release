<project name="zap" default="just-build" basedir=".">
	<description>Build ZAP.</description>
	<!-- set global properties for this build -->
	<property name="src" location="../src" />
	<property name="src.version" value="1.7" />
	<property name="build" location="build" />
	<property name="dist" location="zap" />
	<property name="dist.lib.dir" location="../lib" />
	<property name="javadocs.dir" location="../javadocs" />

	<!-- make the version accessible globally -->
	<loadfile property="version" srcfile="version.txt">
	</loadfile>

	<!-- mac specific properties -->
	<property name="dist-mac" location="zap-mac" />
	<property name="mac-skeleton" location="mac_os_x" />
	<property name="app.name" value="OWASP ZAP.app" />
	<property name="app.bundle" value="${dist-mac}/${app.name}" />
	<property name="app.executable" value="${app.bundle}/Contents/MacOS/JavaAppLauncher" />
	<property name="app.java" value="${app.bundle}/Contents/Java" />
	<property name="app.plugins" value="${app.bundle}/Contents/PlugIns" />

	<!-- Detect Operating system (Though only the Mac check is used, the other OS checks might be useful for future purposes -->
	<condition property="isMac">
		<os family="mac" />
	</condition>
	<condition property="isUnix">
		<os family="unix" />
	</condition>
	<condition property="isWindows">
		<os family="windows" />
	</condition>
	
	<!-- svn command line -->
	<property name="svn.cmd" value="svn" />

	<path id="dist.classpath">
		<!--pathelement location="."/-->
		<fileset dir="${dist.lib.dir}" includes="**/*.jar" />
	</path>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />

		<!-- Create the build directory structure used by compile -->

		<delete dir="${dist}" includeEmptyDirs="true" />
		<delete dir="${build}" includeEmptyDirs="true" />

		<mkdir dir="${build}" />
	</target>
	
	<target name="compile" depends="init" description="compile the source ">
		<echo message="Compiling the source..." />
		<!-- Compile the java code from ${src} into ${build} -->
		<!--javac srcdir="${src}" destdir="${build}" classpath="zap.jar"/-->
		<javac srcdir="${src}" destdir="${build}" source="${src.version}" target="${src.version}" includeantruntime="false">
			<classpath>
				<fileset dir="${dist.lib.dir}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>

	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<echo message="Creating the distribution set..." />

		<!-- Create the distribution directory -->
		<mkdir dir="${dist}" />
		<!--copy file="lib.jar" tofile="${dist}/lib.jar"/-->

		<copy file="${src}/xml/log4j.properties" tofile="${build}/xml/log4j.properties" />

		<copy todir="${build}/resource">
			<fileset dir="${src}/resource" excludes="**/.svn/** **/_svn/**" />
		</copy>

		<copy todir="${dist}/xml">
			<fileset dir="${src}/xml" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/db">
			<fileset dir="${src}/db" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/dirbuster">
			<fileset dir="${src}/dirbuster" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/filter">
			<fileset dir="${src}/filter" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/fuzzers">
			<fileset dir="${src}/fuzzers" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/plugin">
			<fileset dir="${src}/plugin" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/session">
			<fileset dir="${src}/session" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/lang">
			<fileset dir="${src}/lang" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<!-- Special case - duplicate the default lang file (issue 151)-->
		<copy file="${src}/lang/Messages.properties" tofile="${dist}/lang/Messages_en_GB.properties"/>
		
		<copy todir="${dist}/license">
			<fileset dir="${src}/license" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/log">
			<fileset dir="${src}/log" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/lib">
			<fileset dir="${dist.lib.dir}">
				<include name="**/*.jar" />
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
			</fileset>
		</copy>
		<!-- Copy any scripts, and give execute perms -->
		<copy todir="${dist}">
			<fileset dir="${src}" includes="*.sh" excludes="**/.svn/** **/_svn/**" />
			<fileset dir="${src}" includes="*.bat" excludes="**/.svn/** **/_svn/**" />
		</copy>

		<chmod perm="ug+x">
			<!-- This only has any effect on Linux -->
			<fileset dir="${dist}">
				<include name="*.sh" />
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
			</fileset>
		</chmod>

		<!--copy file="${src}/doc/release.txt" todir="${dist}"/-->

		<copy file="${src}/resource/zap.ico" todir="${dist}"/>

		<manifestclasspath property="dist.manifest.classpath" jarfile="${dist}/zap.jar">
			<!--classpath refid="dist.classpath" /-->
			<classpath>
				<fileset dir="${dist}/lib">
					<include name="**/*.jar" />
				</fileset>
				<!--path location="lang"/-->
			</classpath>
		</manifestclasspath>

		<jar jarfile="${dist}/zap.jar" update="true" compress="false">
			<zipfileset dir="${build}" prefix="" />
			<manifest>
				<attribute name="Main-Class" value="org.zaproxy.zap.ZAP" />
				<attribute name="Class-Path" value="${dist.manifest.classpath}" />
				<attribute name="Implementation-Version" value="${version}" />
			</manifest>
		</jar>
		<jar jarfile="${dist}/zap-api.jar" update="true" compress="false">
			<zipfileset dir="${build}" prefix="">
				<include name="org/zaproxy/clientapi/**"/>
			</zipfileset>
			<manifest>
				<attribute name="Implementation-Version" value="${version}" />
			</manifest>
		</jar>
	</target>
	
	<target name="generate-help-file" description="generates the help file and copies it to the right place">
		<property name="help.dir" location="${src}/help" />
		<property name="help.zap.dir" location="${help.dir}/zaphelp" />
		<property name="help.jar.name" value="zaphelp" />
		<property name="help.jar.generated" value="${help.dir}/${help.jar.name}.jar" />
		<property name="help.jar.dist.lib" value="${dist.lib.dir}/${help.jar.name}.jar" />
		
		<!-- Generate the indexes -->
		<java classname="com.sun.java.help.search.Indexer" fork="true" dir="${help.zap.dir}">
			<arg value="zaphelp"/>
			<classpath>
				<pathelement location="lib/jhall.jar"/>
			</classpath>
		</java>
		<!-- delete the previous jar in the help directory (if present) -->
		<delete file="${help.jar.generated}" />
		<!-- Jar up the help files -->
		<jar destfile="${help.jar.generated}"
			basedir="${help.zap.dir}"
			includes="**"
			excludes="**/.svn/**"
		/>
		<!-- Delete the indexes, generated previously, as they are no longer needed. -->
		<delete dir="${help.zap.dir}/JavaHelpSearch" />
		<!-- Delete the old jar in lib directory -->
		<delete file="${help.jar.dist.lib}" />
		<!-- Move the new one to the lib directory -->
		<move file="${help.jar.generated}" tofile="${help.jar.dist.lib}" />
		
	</target>

	<target name="generate-language-file" description="generates the language file (note the X should be changed;)">
		<property name="langfile" value="ZAP_${version}_language_pack.X.zaplang" />
		<!-- delete the previous one (if present) -->
		<delete file="${langfile}" />
		<!-- Zip up the language files -->
		<zip destfile="${langfile}"
			basedir="${src}"
			includes="/lang/**"
			excludes="**/.svn/**"
		/>
	</target>

	<target name="generate-javadocs" description="generates the javadocs">
		<!-- Delete all the previous generated files and directories from the 
		"javadocs.dir" directory before generating the new ones in case of any 
		class or package has been renamed, deleted or moved. -->
		<delete includeEmptyDirs="true">
			<fileset dir="${javadocs.dir}" includes="**/*" />
		</delete>
		
		<javadoc packagenames="org.*"
			sourcepath="${src}"
			destdir="${javadocs.dir}"
			windowTitle="OWASP Zed Attack Proxy"
			classpathref="dist.classpath"
			link="http://docs.oracle.com/javase/7/docs/api/">
		</javadoc>
		<!-- set mime-type such that HTML is returned by server -->
		<exec executable="${svn.cmd}">
			<arg value="propset" />
			<arg value="svn:mime-type" />
			<arg value="text/html" />
			<arg value="${javadocs.dir}/org" />
			<arg value="--recursive" />
			<arg value="--quiet" />
		</exec>
	</target>
	

	<target name="package-linux" description="package the Linux build">
		<echo message="Packaging the Linux build..." />

		<!-- delete previously build packages -->
		<delete file="ZAP_${version}_Linux.tar.gz" />

		<!-- Tar up the release -->
		<tar destfile="ZAP_${version}_Linux.tar.gz" compression="gzip">
			<tarfileset dir="${dist}" prefix="ZAP_${version}" preserveLeadingSlashes="false">
				<include name="**" />
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
				<exclude name="zap.sh" />
			</tarfileset>
			<tarfileset dir="${dist}" prefix="ZAP_${version}" filemode="755" preserveLeadingSlashes="false">
				<include name="zap.sh" />
			</tarfileset>
		</tar>
	</target>

	<target name="package-macosx" if="isMac" description="package the Mac OS X release">
		<echo message="Packaging the Mac OS X build..." />

		<delete dir="${dist-mac}" includeEmptyDirs="true" />
		<mkdir dir="${dist-mac}" />

		<copy todir="${dist-mac}">
			<fileset dir="${mac-skeleton}" excludes="**/.svn/** **/_svn/**" />
		</copy>

		<copy todir="${app.java}">
			<fileset dir="${dist}">
				<include name="**" />
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
				<exclude name="**/*.bat" />
				<exclude name="**/*.ico" />
			</fileset>
		</copy>
		
		<chmod perm="755" file="${app.executable}" />
		<chmod perm="755" file="${app.java}/zap.sh" />
		
		<!-- SVN destroys the JRE directory, therefore we have to use this ugly fix in order to include a proper JRE -->
		<exec dir="${app.plugins}" executable="unzip" spawn="false" failonerror="true">
			<arg line=" 1.7.0u.jre.zip" />
		</exec>
		<delete file="${app.plugins}/1.7.0u.jre.zip" />
		
		<replace dir="${app.bundle}" summary="true" encoding="UTF-8">
			<include name="**/Info.plist" />
			<replacefilter token="_SHORT_VERSION_STRING_" value="${version}" />
			<replacefilter token="_VERSION_STRING_" value="1" />
		</replace>

		<echo message="Creating ZIP archive for the Mac OS X release..." />
		<delete file="ZAP_${version}_Mac_OS_X.zip" />
		<exec dir="${dist-mac}" executable="zip" spawn="false" failonerror="true">
			<arg line="-y -r ../ZAP_${version}_Mac_OS_X.zip '${app.name}'" />
		</exec>

		<!-- Housekeeping: Delete the mac distribution directory -->
		<delete dir="${dist-mac}" includeEmptyDirs="true" />

	</target>

	<target name="just-build">
		<antcall target="dist" />
		<antcall target="package-linux" />
		<antcall target="package-macosx" />
	</target>
	
</project>