<project name="zap" default="full-release" basedir=".">
    <description>Build ZAP.</description>
    <!-- set global properties for this build -->
    <property name="src" location="../src" />
    <property name="src.version" value="1.7" />
    <property name="build" location="build" />
    <property name="build.lib.dir" location="lib" />
    <property name="build.crowdin.dir" location="${build}/crowdin" />
    <property name="dist" location="zap" />
    <property name="dist.lib.dir" location="../lib" />
    <property name="dist.lib.license.dir" location="../license" />
    <property name="dist.lib.exploded.dir" location="api-libs-exploded" />
    <property name="javadocs.dir" location="../javadocs" />
    <property name="lang.dir" value="${src}/lang" />
    <property name="help.dir" value="${src}/help" />
    <property name="zap.extensions.alpha.dir" location="../../zap-extensions-alpha/" />
    <property name="zap.extensions.beta.dir" location="../../zap-extensions-beta/" />
    <property name="zap.extensions.trunk.dir" location="../../zap-extensions/" />
    <property name="zap.java.api.version" value="4" />

    <property name="crowdin.zap.project.id" value="owasp-zap" />
    <property name="crowdin.zap.help.project.id" value="owasp-zap-help" />

    <property file="crowdin-api-keys"/>

    <!-- mac specific properties -->
    <property name="dist-mac" location="zap-mac" />
    <property name="mac-skeleton" location="mac_os_x" />
    <property name="app.name" value="OWASP ZAP.app" />
    <property name="app.bundle" value="${dist-mac}/${app.name}" />
    <property name="app.executable" value="${app.bundle}/Contents/MacOS/JavaAppLauncher" />
    <property name="app.java" value="${app.bundle}/Contents/Java" />
    <property name="app.plugins" value="${app.bundle}/Contents/PlugIns" />

    <!-- Detect Operating system (Though only the Mac check is used, the other OS checks might be useful for future purposes -->
    <condition property="isMac">
        <os family="mac" />
    </condition>
    <condition property="isUnix">
        <os family="unix" />
    </condition>
    <condition property="isWindows">
        <os family="windows" />
    </condition>

    <!-- svn command line -->
    <property name="svn.cmd" value="svn" />
    <property name="git.cmd" value="git" />

    <path id="build.classpath">
        <fileset dir="${build.lib.dir}" includes="*.jar"/>
    </path>

    <!-- Ant task to generate JavaHelp jars -->
    <taskdef name="generatejavahelpjars" classname="org.zaproxy.ant.javahelp.taskdefs.GenerateJavaHelpJars" classpathref="build.classpath" />

    <!-- Crowdin related Ant types -->
    <typedef name="crowdinconfiguration" classname="org.zaproxy.ant.crowdin.types.Configuration" classpathref="build.classpath" loaderref="lib.path.loader" />
    <typedef name="cclanguagemapping" classname="org.zaproxy.ant.crowdin.types.LanguageMapping" loaderref="lib.path.loader" />
    <typedef name="ccexclude" classname="org.zaproxy.ant.crowdin.types.Exclude" loaderref="lib.path.loader" />
    <typedef name="ccproject" classname="org.zaproxy.ant.crowdin.types.Project" loaderref="lib.path.loader" />
    <typedef name="ccfiles" classname="org.zaproxy.ant.crowdin.types.FileSet" loaderref="lib.path.loader" />
    <typedef name="ccinclude" classname="org.zaproxy.ant.crowdin.types.Include" loaderref="lib.path.loader" />
    <typedef name="cctranslatableelement" classname="org.zaproxy.ant.crowdin.types.TranslatableElement" loaderref="lib.path.loader" />
    <typedef name="clastmodifieddateprovider" classname="org.zaproxy.ant.crowdin.types.ModifiedDateProvider" loaderref="lib.path.loader" />
    <!-- Crowdin related Ant tasks -->
    <taskdef name="crowdinupdatesources" classname="org.zaproxy.ant.crowdin.taskdefs.CrowdinUpdateSources" loaderref="lib.path.loader" />
    <taskdef name="crowdindownloadtranslations" classname="org.zaproxy.ant.crowdin.taskdefs.CrowdinDownloadTranslations" loaderref="lib.path.loader" />
    <taskdef name="crowdinupdatehelpsetlangattribute" classname="org.zaproxy.ant.crowdin.taskdefs.CrowdinUpdateHelpSetLangAttribute" loaderref="lib.path.loader" />
    <taskdef name="crowdinexport" classname="org.zaproxy.ant.crowdin.taskdefs.CrowdinTriggerExportPackage" loaderref="lib.path.loader" />
    <taskdef name="crowdindownload" classname="org.zaproxy.ant.crowdin.taskdefs.CrowdinDownloadPackage" loaderref="lib.path.loader" />

    <!-- Configuration for Crowdin tasks, it represents the files (and its properties) that should be upload/download to/from Crowdin. -->
    <crowdinconfiguration id="crowdin.config">
        <!-- translation of UI strings -->
        <ccproject projectid="${crowdin.zap.project.id}" apikey="${crowdin.zap.api.key}">
            <ccexclude path="/videos/**" />
            <!-- zaproxy project -->
            <ccfiles basedir="${lang.dir}" exportpatternprefix="/zaproxy/lang/">
                <!-- UI strings -->
                <ccinclude source="Messages.properties" 
                    crowdinpath="/%original_file_name%"
                    exportpattern="%file_name%_%locale_with_underscore%.%file_extension%" />
                <!-- Alerts -->
                <ccinclude source="vulnerabilities.xml" 
                    crowdinpath="/%original_file_name%"
                    exportpattern="%file_name%_%locale_with_underscore%.%file_extension%">
                </ccinclude>
            </ccfiles>
            <!-- zaproxy project core add-ons -->
            <ccfiles basedir="${src}/org/zaproxy/zap/extension/" exportpatternprefix="/zaproxy/add-ons/">
                <!-- core-addons/ -->
                <ccinclude source="*/Messages.properties" 
                    crowdinpath="/core/*/%original_file_name%"
                    exportpattern="*/%file_name%_%locale_with_underscore%.%file_extension%" />
            </ccfiles>
            <!-- zap-extensions project -->
            <!-- alpha extensions -->
            <ccfiles basedir="${zap.extensions.alpha.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/alpha/">
                <ccinclude id="addons.include.messages" source="*/Messages.properties" 
                    crowdinpath="/extensions/*/%original_file_name%"
                    exportpattern="*/%file_name%_%locale_with_underscore%.%file_extension%" />
            </ccfiles>
            <!-- beta extensions -->
            <ccfiles basedir="${zap.extensions.beta.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/beta/">
                <ccinclude refid="addons.include.messages" />
            </ccfiles>
            <!-- trunk extensions -->
            <ccfiles basedir="${zap.extensions.trunk.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/trunk/">
                <ccinclude refid="addons.include.messages" />
                <ccexclude id="exclude.examples" path="example*/*" />
            </ccfiles>
        </ccproject>
        <!-- translation of help resources -->
        <ccproject projectid="${crowdin.zap.help.project.id}" apikey="${crowdin.zap.help.api.key}">
            <!-- zaproxy project -->
            <ccfiles basedir="${help.dir}" exportpatternprefix="/zaproxy/">
                <!-- contents -->
                <ccinclude source="zaphelp/contents/**/*.html"
                    crowdinpath="/contents/**/%original_file_name%"
                    exportpattern="zaphelp_%locale_with_underscore%/contents/**/%original_file_name%" />
                <!-- helpset -->
                <ccinclude source="zaphelp/helpset.hs" 
                    crowdinpath="/%file_name%.xml" 
                    exportpattern="zaphelp_%locale_with_underscore%/%file_name%_%locale_with_underscore%.%file_extension%">
                    <cctranslatableelement xpath="/helpset/title" />
                    <cctranslatableelement xpath="/helpset/presentation/title" />
                    <cctranslatableelement xpath="/helpset/view/label" />
                </ccinclude>
                <!-- toc -->
                <ccinclude source="zaphelp/toc.xml" 
                    crowdinpath="/%original_file_name%"
                    exportpattern="zaphelp_%locale_with_underscore%/%original_file_name%">
                    <cctranslatableelement xpath="/toc/descendant::tocitem[@text]" />
                </ccinclude>
                <!-- index -->
                <ccinclude source="zaphelp/index.xml" 
                    crowdinpath="/%original_file_name%" 
                    exportpattern="zaphelp_%locale_with_underscore%/%original_file_name%">
                    <cctranslatableelement xpath="/index/descendant::indexitem[@text]" />
                </ccinclude>
            </ccfiles>
            <!-- zap-extensions project -->
            <!-- alpha extensions -->
            <ccfiles basedir="${zap.extensions.alpha.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/alpha/">
                <!-- contents -->
                <ccinclude id="addons.include.help.contents" source="*/resource/help/zaphelp/**/*.html"
                    crowdinpath="/extensions/*/contents/**/%original_file_name%"
                    exportpattern="*/resource/help_%locale_with_underscore%/contents/**/%original_file_name%" />
                <!-- helpset -->
                <ccinclude id="addons.include.help.file.hs" source="*/resource/help/helpset.hs" 
                    crowdinpath="/extensions/*/%file_name%.xml" 
                    exportpattern="*/resource/help_%locale_with_underscore%/%file_name%_%locale_with_underscore%.%file_extension%">
                    <cctranslatableelement xpath="/helpset/title" />
                    <cctranslatableelement xpath="/helpset/presentation/title" />
                    <cctranslatableelement xpath="/helpset/view/label" />
                </ccinclude>
                <!-- toc -->
                <ccinclude id="addons.include.help.file.toc" source="*/resource/help/toc.xml" 
                    crowdinpath="/extensions/*/%original_file_name%"
                    exportpattern="*/resource/help_%locale_with_underscore%/%original_file_name%">
                    <cctranslatableelement xpath="/toc/descendant::tocitem[@text]" />
                </ccinclude>
                <!-- index -->
                <ccinclude id="addons.include.help.file.index" source="*/resource/help/index.xml" 
                    crowdinpath="/extensions/*/%original_file_name%" 
                    exportpattern="*/resource/help_%locale_with_underscore%/%original_file_name%">
                    <cctranslatableelement xpath="/index/descendant::indexitem[@text]" />
                </ccinclude>
            </ccfiles>
            <!-- beta extensions -->
            <ccfiles basedir="${zap.extensions.beta.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/beta/">
                <ccinclude refid="addons.include.help.contents" />
                <ccinclude refid="addons.include.help.file.hs" />
                <ccinclude refid="addons.include.help.file.toc" />
                <ccinclude refid="addons.include.help.file.index" />
            </ccfiles>
            <!-- trunk extensions -->
            <ccfiles basedir="${zap.extensions.trunk.dir}/src/org/zaproxy/zap/extension/" 
                exportpatternprefix="/zap-extensions/trunk/">
                <ccinclude refid="addons.include.help.contents" />
                <ccinclude refid="addons.include.help.file.hs" />
                <ccinclude refid="addons.include.help.file.toc" />
                <ccinclude refid="addons.include.help.file.index" />
                <ccexclude refid="exclude.examples" />
            </ccfiles>
        </ccproject>
    </crowdinconfiguration>

    <path id="dist.classpath">
        <!--pathelement location="."/-->
        <fileset dir="${dist.lib.dir}" includes="**/*.jar" />
    </path>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp />

        <!-- Create the build directory structure used by compile -->

        <delete dir="${dist}" includeEmptyDirs="true" />
        <delete dir="${build}" includeEmptyDirs="true" />
        <delete dir="${dist.lib.exploded.dir}" includeEmptyDirs="true" />

        <mkdir dir="${build}" />
    </target>

    <target name="compile" depends="init" description="compile the source ">
        <echo message="Compiling the source..." />

        <!-- Compile with debug information if the property "javac.debug" is set to true -->
        <local name="debug" />
        <condition property="debug" value="true" else="false">
            <istrue value="${javac.debug}" />
        </condition>

        <!-- Compile the java code from ${src} into ${build} -->
        <!--javac srcdir="${src}" destdir="${build}" classpath="zap.jar"/-->
        <javac srcdir="${src}" destdir="${build}" source="${src.version}" target="${src.version}" includeantruntime="false" debug="${debug}" encoding="UTF-8">
            <classpath>
                <fileset dir="${dist.lib.dir}">
                    <include name="**/*.jar" />
                </fileset>
            </classpath>
        </javac>

    </target>

    <target name="dist" depends="compile" description="generate the distribution">
        <echo message="Creating the distribution set..." />

        <!-- Create the distribution directory -->
        <mkdir dir="${dist}" />
        <!--copy file="lib.jar" tofile="${dist}/lib.jar"/-->

        <copy file="${src}/xml/log4j.properties" tofile="${build}/xml/log4j.properties" />

        <copy todir="${build}/resource">
            <fileset dir="${src}/resource" excludes="**/.svn/** **/_svn/**" />
        </copy>

        <copy todir="${dist}/xml">
            <fileset dir="${src}/xml" excludes="**/.svn/** **/_svn/**" />
        </copy>
        <copy todir="${dist}/db">
            <fileset dir="${src}/db" excludes="**/.svn/** **/_svn/**" />
        </copy>
        <copy todir="${dist}/filter">
            <fileset dir="${src}/filter" excludes="**/.svn/** **/_svn/**" />
        </copy>
        <copy todir="${dist}/fuzzers">
            <fileset dir="${src}/fuzzers" excludes="**/.svn/** **/_svn/**" />
        </copy>
        <copy todir="${dist}/plugin">
            <fileset dir="${src}/plugin" excludes="**/.svn/** **/_svn/**" />
        </copy>
        <copy todir="${dist}/scripts">
            <fileset dir="${src}/scripts" excludes="**/.svn/** **/_svn/**" />
        </copy>
        <copy todir="${dist}/session">
            <fileset dir="${src}/session" excludes="**/.svn/** **/_svn/**" />
        </copy>
        <copy todir="${dist}/lang">
            <fileset dir="${src}/lang" excludes="**/.svn/** **/_svn/**" />
        </copy>
        <!-- Special case - duplicate the default lang file (issue 151)-->
        <copy file="${src}/lang/Messages.properties" tofile="${dist}/lang/Messages_en_GB.properties"/>

        <copy todir="${dist}/license">
            <fileset dir="${src}/license" excludes="**/.svn/** **/_svn/**" />
        </copy>
        <copy todir="${dist}/log">
            <fileset dir="${src}/log" excludes="**/.svn/** **/_svn/**" />
        </copy>
        <copy todir="${dist}/lib">
            <fileset dir="${dist.lib.dir}">
                <include name="**/*.jar" />
                <exclude name="**/.svn/**" />
                <exclude name="**/_svn/**" />
            </fileset>
        </copy>
        <!-- Include properties files from the source code to support extension specific language files -->
        <copy todir="${build}/org">
            <fileset dir="${src}/org" includes="**/*.properties" />
        </copy>
        <!-- Copy standard README - this is overwritted for weekly releases -->
        <copy file="${src}/doc/README" tofile="${dist}/README" />

        <!-- Copy any scripts, and give execute perms -->
        <copy todir="${dist}">
            <fileset dir="${src}" includes="*.sh" excludes="**/.svn/** **/_svn/**" />
            <fileset dir="${src}" includes="*.bat" excludes="**/.svn/** **/_svn/**" />
        </copy>

        <chmod perm="ug+x">
            <!-- This only has any effect on Linux -->
            <fileset dir="${dist}">
                <include name="*.sh" />
                <exclude name="**/.svn/**" />
                <exclude name="**/_svn/**" />
            </fileset>
        </chmod>

        <!--copy file="${src}/doc/release.txt" todir="${dist}"/-->

        <copy file="${src}/resource/zap.ico" todir="${dist}"/>

        <!-- Copy source to build directory to be included in jar, only if "dist.with.source" is set -->
        <antcall target="copy-source-to-build" />

        <manifestclasspath property="dist.manifest.classpath" jarfile="${dist}/zap.jar">
            <!--classpath refid="dist.classpath" /-->
            <classpath>
                <fileset dir="${dist}/lib">
                    <include name="**/*.jar" />
                    <exclude name="**/JBroFuzz.jar"/>
                </fileset>
                <!-- include JBroFuzz.jar at the end of the classpath, since it has old versions of SQLite that cause issues -->
				<fileset dir="${dist}/lib">
                    <include name="**/JBroFuzz.jar"/>
                </fileset>
                <!--path location="lang"/-->
            </classpath>
        </manifestclasspath>

        <jar jarfile="${dist}/zap.jar" update="true" compress="false">
            <zipfileset dir="${build}" prefix="">
            	<!-- Exclude all extensions that are build as addons - these are build next -->
            </zipfileset>
            <manifest>
                <attribute name="Main-Class" value="org.zaproxy.zap.ZAP" />
                <attribute name="Class-Path" value="${dist.manifest.classpath}" />
                <attribute name="Implementation-Version" value="${version}" />
            </manifest>
        </jar>

        <unjar dest="${dist.lib.exploded.dir}">
            <fileset dir="${dist.lib.dir}" casesensitive="yes">
                <include name="**/ant.jar" />
                <include name="**/jdom.jar" />
                <include name="**/commons-beanutils-1.8.3.jar" />
                <include name="**/commons-collections-3.2.1.jar" />
                <include name="**/commons-lang-2.6.jar" />
                <include name="**/commons-logging-1.1.1.jar" />
                <include name="**/ezmorph-1.0.6.jar" />
                <include name="**/junit-4.8.2.jar" />
                <!--
                    NOTE: If you're adding a jar to this list, ensure you add the license to ../license
                    so it is brought into zap-api.jar
                -->
            </fileset>
        </unjar>

    	<!-- Need to manually increment the API jar version ${zap.java.api.version} (at the start) before uploading a new one -->
        <jar jarfile="${dist}/zap-api-v2-${zap.java.api.version}.jar" update="true" compress="false">
            <zipfileset dir="${build}" prefix="">
                <include name="org/zaproxy/clientapi/**"/>
            </zipfileset>
            <zipfileset dir="${dist.lib.exploded.dir}" prefix="">
                <include name="**/*.class"/>
                <exclude name="**/*LICENSE*"/>
                <exclude name="**/*NOTICE*"/>
            </zipfileset>
            <zipfileset dir="${dist.lib.license.dir}" prefix="META-INF/license"/>
            <manifest>
                <attribute name="Implementation-Version" value="${zap.java.api.version}" />
                <attribute name="Main-Class" value="org.zaproxy.clientapi.core.ClientApiMain" />
            </manifest>
        </jar>
        
        <!-- Delete the libraries files, "unjared" previously, as they are no longer needed. -->
        <delete dir="${dist.lib.exploded.dir}" includeEmptyDirs="true" />
    </target>

    <target name="dist-with-source" description="Builds ZAP jar with source to be used in zap-extensions">
        <property name="dist.with.source" value="true" />
        <antcall target="dist" />
    </target>

    <target name="copy-source-to-build" if="dist.with.source">
        <copy todir="${build}">
            <fileset dir="${src}" includes="**/*.java" />
        </copy>
    </target>

    <target name="generate-help-jars" description="Generates all ZAP (core) help jars (default and i18n) and copies them to the right place (lib directory)">
        <local name="wkdir" />
        <property name="wkdir" location="${build}/HelpJars" />
        <delete dir="${wkdir}" includeEmptyDirs="true" />
        <mkdir dir="${wkdir}" />
        <generatejavahelpjars jhalljar="${build.lib.dir}/jhall.jar" destdir="${dist.lib.dir}" 
            workingdir="${wkdir}" helpcontentsdirname="contents" helpsetfilename="helpset*.hs">
            <dirset dir="${help.dir}">
                <include name="zaphelp" />
                <include name="zaphelp_*_*" />
            </dirset>
        </generatejavahelpjars>
        <delete dir="${wkdir}" includeEmptyDirs="true" />
    </target>

    <target name="generate-language-file" description="generates the language file (note the X should be changed;)">
        <property name="langfile" value="ZAP_${version}_language_pack.X.zaplang" />
        <!-- delete the previous one (if present) -->
        <delete file="${langfile}" />
        <!-- Zip up the language files -->
        <zip destfile="${langfile}"
             basedir="${src}"
             includes="lang/**"
             excludes="**/.svn/**"
                />
    </target>

    <target name="crowdin-update-sources" description="Updates the sources, of all ZAP projects, into Crowdin">
        <!-- When using updateneweronly as true you have to commit/push the changes before updating the sources so the commit 
        date is newer than the modification date in Crowdin.
        Use updateneweronly as true whenever possible as it updates/uploads only the necessary files.
        Note: when moving add-ons between branches updateneweronly has to be false to force the update of export pattern -->
        <crowdinupdatesources configrefid="crowdin.config" dryrun="true" verbose="true" updateoption="update_as_unapproved" 
            xmlcontentsegmentation="false" updateneweronly="false" deleteremoved="false">
            <!-- For SVN repo, uses commit date (from svn info) -->
            <!-- <clastmodifieddateprovider name="svn" cmdpath="${svn.cmd}" failonerror="true" /> -->
            <!-- For Git repo, uses "committer date" (from git log) -->
            <!-- <clastmodifieddateprovider name="git" cmdpath="${git.cmd}" failonerror="true" /> -->
            <!-- File system file's last modified date. Not recommended, unless files' last
            modified date is in sync with Git/SVN push/commit dates -->
            <!-- <clastmodifieddateprovider name="file-system" /> -->
        </crowdinupdatesources>
    </target>

    <target name="crowdin-download-translations" description="Downloads and updates the translations, from Crowdin, for all ZAP projects">
        <crowdindownloadtranslations configrefid="crowdin.config" dryrun="true" verbose="true" workingdir="${build.crowdin.dir}" />
    	<crowdinupdatehelpsetlangattribute configrefid="crowdin.config" verbose="true" helpsetfilename="helpset.hs" />
    </target>

    <target name="crowdin-trigger-export-packages" description="Triggers the build of ZAP's Crowdin projects translation package">
        <crowdinexport projectid="${crowdin.zap.project.id}" apikey="${crowdin.zap.api.key}" dryrun="true" />
        <crowdinexport projectid="${crowdin.zap.help.project.id}" apikey="${crowdin.zap.help.api.key}" dryrun="true" />
    </target>

    <target name="crowdin-download-packages" description="Downloads ZAP's Crowdin projects translation packages">
        <crowdindownload projectid="${crowdin.zap.project.id}" apikey="${crowdin.zap.api.key}" 
            to="${crowdin.dir}/${crowdin.zap.project.id}.zip" language="all" dryrun="true" />
        <crowdindownload projectid="${crowdin.zap.help.project.id}" apikey="${crowdin.zap.help.api.key}" 
            to="${crowdin.dir}/${crowdin.zap.help.project.id}.zip" language="all" dryrun="true" />
    </target>

    <macrodef name="set-svn-mime-type-prop">
        <attribute name="directory"/>
        <attribute name="files" default="" />
        <attribute name="mimetype"/>
        <sequential>
            <local name="file.mime.type.targets" />
            <property name="file.mime.type.targets" value="${build}/mime-type-targets" />
            <local name="paths" />
            <pathconvert property="paths" pathsep="${line.separator}">
                <fileset dir="@{directory}" includes="@{files}" casesensitive="no" />
            </pathconvert>
            <echo output="${file.mime.type.targets}">${paths}</echo>
            <exec executable="${svn.cmd}" failonerror="yes">
                <arg value="propset" />
                <arg value="svn:mime-type" />
                <arg value="@{mimetype}" />
                <arg value="--targets" />
                <arg value="${file.mime.type.targets}" />
                <arg value="--quiet" />
            </exec>
            <delete file="${file.mime.type.targets}" />
        </sequential>
    </macrodef>

    <target name="generate-javadocs" description="generates the javadocs">
        <!-- Delete all the previous generated files and directories from the
          "javadocs.dir" directory before generating the new ones in case of any
          class or package has been renamed, deleted or moved. -->
        <delete includeEmptyDirs="true">
            <fileset dir="${javadocs.dir}" includes="**/*" />
        </delete>

        <echo message="Generating JavaDoc..." />
        <javadoc packagenames="org.*"
                 sourcepath="${src}"
                 encoding="UTF-8"
                 destdir="${javadocs.dir}"
                 windowTitle="OWASP Zed Attack Proxy"
                 classpathref="dist.classpath"
                 link="http://docs.oracle.com/javase/7/docs/api/">
        </javadoc>

        <echo message="Adding generated files to SVN index..." />
        <exec executable="${svn.cmd}" failonerror="yes">
            <arg value="add" />
            <arg value="${javadocs.dir}" />
            <arg value="--force" />
            <arg value="--quiet" />
        </exec>

        <echo message="Applying SVN mime-type property to generated files..." />
        <!-- set mime-type such that HTML is returned by server -->
        <set-svn-mime-type-prop directory="${javadocs.dir}" files="**/*.html" mimetype="text/html" />
        <set-svn-mime-type-prop directory="${javadocs.dir}" files="**/*.css" mimetype="text/css" />
        <set-svn-mime-type-prop directory="${javadocs.dir}" files="**/*.gif" mimetype="image/gif" />
        <echo message="Done." />
    </target>

    <target name="generate-apis" description="generates the client APIs">
        <path id="classpath">
            <pathelement location="../bin" />
            <fileset dir="../lib" includes="**/*.jar" />
        </path>
		<java classname="org.zaproxy.zap.extension.api.JavaAPIGenerator" dir=".." fork="yes">
			<classpath refid="classpath" />
		</java>
		<java classname="org.zaproxy.zap.extension.api.PythonAPIGenerator" dir=".." fork="yes">
			<classpath refid="classpath" />
		</java>
    </target>

    <target name="copy-jar-to-extension-projects" depends="dist">
        <copy file="${dist}/zap.jar" tofile="${zap.extensions.trunk.dir}/lib/zap.jar"/>
        <copy file="${dist}/zap.jar" tofile="${zap.extensions.beta.dir}/lib/zap.jar"/>
        <copy file="${dist}/zap.jar" tofile="${zap.extensions.alpha.dir}/lib/zap.jar"/>
    </target>


    <target name="package-linux" description="package the Linux build">
        <echo message="Packaging the Linux build..." />

        <!-- delete previously build packages -->
        <delete file="ZAP_${version}_Linux.tar.gz" />

        <!-- Tar up the release -->
        <tar destfile="ZAP_${version}_Linux.tar.gz" compression="gzip">
            <tarfileset dir="${dist}" prefix="ZAP_${version}" preserveLeadingSlashes="false">
                <include name="**" />
                <exclude name="**/.svn/**" />
                <exclude name="**/_svn/**" />
                <exclude name="zap.sh" />
            </tarfileset>
            <tarfileset dir="${dist}" prefix="ZAP_${version}" filemode="755" preserveLeadingSlashes="false">
                <include name="zap.sh" />
            </tarfileset>
        </tar>
    </target>

    <target name="package-macosx" description="package the Mac OS X release">
        <echo message="Packaging the Mac OS X build..." />

        <delete dir="${dist-mac}" includeEmptyDirs="true" />
        <mkdir dir="${dist-mac}" />

        <copy todir="${dist-mac}">
            <fileset dir="${mac-skeleton}" excludes="**/.svn/** **/_svn/**" />
        </copy>

        <copy todir="${app.java}">
            <fileset dir="${dist}">
                <include name="**" />
                <exclude name="**/.svn/**" />
                <exclude name="**/_svn/**" />
                <exclude name="**/*.bat" />
                <exclude name="**/*.ico" />
            </fileset>
        </copy>

        <chmod perm="755" file="${app.executable}" />
        <chmod perm="755" file="${app.java}/zap.sh" />

        <!-- SVN destroys the JRE directory, therefore we have to use this ugly fix in order to include a proper JRE -->
        <exec dir="${app.plugins}" executable="unzip" spawn="false" failonerror="true">
            <arg line=" jdk1.7.0_51.jre.zip" />
        </exec>
        <delete file="${app.plugins}/jdk1.7.0_51.jre.zip" />

        <replace dir="${app.bundle}" summary="true" encoding="UTF-8">
            <include name="**/Info.plist" />
            <replacefilter token="_SHORT_VERSION_STRING_" value="${version}" />
            <replacefilter token="_VERSION_STRING_" value="2" />
        </replace>

        <echo message="Creating ZIP archive for the Mac OS X release..." />
        <delete file="ZAP_${version}_Mac_OS_X.zip" />
        <exec dir="${dist-mac}" executable="zip" spawn="false" failonerror="true">
            <arg line="-y -r ../ZAP_${version}_Mac_OS_X.zip '${app.name}'" />
        </exec>

        <!-- Housekeeping: Delete the mac distribution directory -->
        <delete dir="${dist-mac}" includeEmptyDirs="true" />

    </target>

    <target name="package-daily" description="package a date stamped build">
        <echo message="Packaging a date stamped release..." />

        <!-- delete any of packages for today -->
        <property name="zipname" value="ZAP_WEEKLY_${version}.zip" />
        <delete file="${zipname}" />

        <!-- Tar up the release -->
        <zip destfile="${zipname}">
            <zipfileset dir="${dist}" prefix="ZAP_${version}">
                <include name="**" />
                <exclude name="**/.svn/**" />
                <exclude name="**/_svn/**" />
                <exclude name="zap.sh" />
            </zipfileset>
            <zipfileset dir="${dist}" prefix="ZAP_${version}" filemode="755">
                <include name="zap.sh" />
            </zipfileset>
        </zip>
    </target>

    <target name="full-release">
        <!-- Load the version from a file -->
        <loadfile property="version" srcfile="version.txt" />

        <antcall target="dist" />
        <antcall target="package-linux" />
        <antcall target="package-macosx" />
    </target>

    <target name="day-stamped-release">
        <tstamp>
            <format property="yyyymmdd" pattern="yyyy-MM-dd"/>
        </tstamp>
        <property name="version" value="D-${yyyymmdd}" />
        <echo message="Version is ${version}" />

        <antcall target="generate-help-jars" />
        <!-- Set to compile with debug information -->
        <property name="javac.debug" value="true" />
        <antcall target="dist" />
        <!-- Overwrite the standard README with the weekly one -->
        <delete file="${dist}/README" />
        <copy file="${src}/doc/README.weekly" tofile="${dist}/README"/>
        <antcall target="package-daily" />
    </target>

</project>
