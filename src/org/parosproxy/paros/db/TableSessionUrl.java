/*
 * Zed Attack Proxy (ZAP) and its related class files.
 * 
 * ZAP is an HTTP/HTTPS proxy for assessing web application security.
 * 
 * Copyright 2010 psiinon@gmail.com
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0 
 *   
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */
// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
// ZAP: 2012/08/08 Upgrade to HSQLDB 2.x (introduced TABLE_NAME constant + DbUtils)

package org.parosproxy.paros.db;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class TableSessionUrl extends AbstractTable {
    
    private static final String TABLE_NAME = "SESSION_URL";
    
    private static final String URLID	= "URLID";
    private static final String TYPE	= "TYPE";
    private static final String URL	= "URL";
    
    private PreparedStatement psRead = null;
    private PreparedStatement psInsert = null;
    private CallableStatement psGetIdLastInsert = null;
    private PreparedStatement psGetAlluRLSForType = null;
    private PreparedStatement psDeleteUrls = null;
    private PreparedStatement psDeleteAllUrlsForType = null;

    public TableSessionUrl() {
        
    }
        
    @Override
    protected void reconnect(Connection conn) throws SQLException {
        
        if (!DbUtils.hasTable(conn, TABLE_NAME)) {
            // Need to create the table
            DbUtils.executeAndClose(
                    conn.prepareStatement("CREATE cached TABLE SESSION_URL (urlid bigint generated by default as identity (start with 1), type int not null, url varchar(8192) default '')"));
        }

        psRead	= conn.prepareStatement("SELECT * FROM SESSION_URL WHERE " + URLID + " = ?");
        psInsert = conn.prepareStatement("INSERT INTO SESSION_URL (" + TYPE + ","+ URL + ") VALUES (?, ?)");
        psGetIdLastInsert = conn.prepareCall("CALL IDENTITY();");

        psDeleteUrls = conn.prepareStatement("DELETE FROM SESSION_URL WHERE " + TYPE + " = ? AND " + URL + " = ?");
        psDeleteAllUrlsForType = conn.prepareStatement("DELETE FROM SESSION_URL WHERE " + TYPE + " = ?");

        psGetAlluRLSForType = conn.prepareStatement("SELECT * FROM SESSION_URL WHERE " + TYPE + " = ?");
    }
  
	public synchronized RecordSessionUrl read(long urlId) throws SQLException {
		psRead.setLong(1, urlId);
		
		ResultSet rs = psRead.executeQuery();
		RecordSessionUrl result = build(rs);
		rs.close();
		return result;
	}
	
    public synchronized RecordSessionUrl insert(int type, String url) throws SQLException {
        psInsert.setInt(1, type);
        psInsert.setString(2, url);
        psInsert.executeUpdate();
        
		ResultSet rs = psGetIdLastInsert.executeQuery();
		rs.next();
		long id = rs.getLong(1);
		rs.close();
		return read(id);
		
    }
    
    public synchronized void delete(int type, String url) throws SQLException {
    	psDeleteUrls.setInt(1, type);
    	psDeleteUrls.setString(2, url);
    	psDeleteUrls.executeUpdate();
    }
    
    public synchronized void deleteAllUrlsForType(int type) throws SQLException {
    	psDeleteAllUrlsForType.setInt(1, type);
    	psDeleteAllUrlsForType.executeUpdate();
    }
    

    public List<RecordSessionUrl> getUrlsForType (int type) throws SQLException {
    	List<RecordSessionUrl> result = new ArrayList<RecordSessionUrl>();
    	psGetAlluRLSForType.setInt(1, type);
    	ResultSet rs = psGetAlluRLSForType.executeQuery();
    	while (rs.next()) {
    		result.add(new RecordSessionUrl(rs.getLong(URLID), rs.getInt(TYPE), rs.getString(URL)));
    	}
    	rs.close();
    	
    	return result;
    }
                
    private RecordSessionUrl build(ResultSet rs) throws SQLException {
        RecordSessionUrl rt = null;
        if (rs.next()) {
            rt = new RecordSessionUrl(rs.getLong(URLID), rs.getInt(TYPE), rs.getString(URL));            
        }
        return rt;
        
    }

	public void setUrls(int type, List<String> urls) throws SQLException {
		this.deleteAllUrlsForType(type);
		for (String url : urls) {
			this.insert(type, url);
		}
	}    
}
